package com.example.account.service;

import com.example.account.domain.Account;
import com.example.account.domain.AccountUser;
import com.example.account.dto.AccountDto;
import com.example.account.exception.AccountException;
import com.example.account.repository.AccountUserRepository;
import com.example.account.type.AccountStatus;
import com.example.account.repository.AccountRepository;
import com.example.account.type.ErrorCode;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

//@SpringBootTest
@ExtendWith(MockitoExtension.class)
class AccountServiceTest {

    // AccountService Í∞Ä AccountRepositoryÎ•º ÏùòÏ°¥ÌïòÍ≥† ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê Í∞ÄÏßúÎ°ú ÎßåÎì§Ïñ¥Ï§òÏïº ÌïúÎã§
    @Mock
    private AccountRepository accountRepository;

    @Mock
    private AccountUserRepository accountUserRepository;

    @InjectMocks
    private AccountService accountService;
    // ÏúÑÏùò ÎëêÍ∞úÏùò @Mock ÏùÑ AccountServiceÏóê Îã¥ÏïÑÏ£ºÎ©¥ÏÑú AccountService mock ÏôÑÏÑ±

    @Test
    void createAccountSuccess () {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));
        given(accountRepository.findFirstByOrderByIdDesc())
                .willReturn(Optional.of(Account.builder()
                                .accountUser(user)
                                .accountNumber("1000000012").build()));
        given(accountRepository.save(any()))
                .willReturn(Account.builder()
                        .accountUser(user)
                        .accountNumber("1000000013").build());

        ArgumentCaptor<Account> captor = ArgumentCaptor.forClass(Account.class);

        //when
        AccountDto accountDto = accountService.createAccount(1L, 1000L);

        //then
        verify(accountRepository, times(1)).save(captor.capture());
        // accountRepositoryÎ•º 1Î≤à Ïã§ÌñâÌï¥ÏÑú Ï†ÄÏû•Ìï†Í±¥Îç∞ Í∑∏ Î∂ÄÎ∂ÑÏùÑ captureÌï†Í±∞Ïïº

        assertEquals(12L, accountDto.getUserId());
//        assertEquals("1000000013", accountDto.getAccountNumber());
        assertEquals("1000000013", captor.getValue().getAccountNumber());
    }

    @Test
    void createFirstAccountSuccess () {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(15L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));
        given(accountRepository.findFirstByOrderByIdDesc())
                .willReturn(Optional.empty());
        given(accountRepository.save(any()))
                .willReturn(Account.builder()
                        .accountUser(user)
                        .accountNumber("1000000013").build());

        ArgumentCaptor<Account> captor = ArgumentCaptor.forClass(Account.class);

        //when
        AccountDto accountDto = accountService.createAccount(1L, 1000L);

        //then
        verify(accountRepository, times(1)).save(captor.capture());
        // accountRepositoryÎ•º 1Î≤à Ïã§ÌñâÌï¥ÏÑú Ï†ÄÏû•Ìï†Í±¥Îç∞ Í∑∏ Î∂ÄÎ∂ÑÏùÑ captureÌï†Í±∞Ïïº

        assertEquals(15L, accountDto.getUserId());
        assertEquals("1000000000", captor.getValue().getAccountNumber());
        // accountNumberÎ•º "1000000013"ÏúºÎ°ú ÏÑ§Ï†ïÌñàÎäîÎç∞ÎèÑ ÌÖåÏä§Ìä∏Í∞Ä ÌÜµÍ≥ºÌïòÎäî Ïù¥Ïú†
        // -> captorÏù¥ Ïã§ÌñâÎêòÎäî ÏãúÏ†êÏù¥ accountRespository.save()Ïù¥Í∏∞ ÎïåÎ¨∏ÏûÑ
        // accountRespository.save() Ï†ÑÏóê
        // .willReturn(Optional.empty()) Î°ú ÏÑ§Ï†ïÌñàÍ∏∞ ÎïåÎ¨∏Ïóê **Í∏∞Ï°¥ Í≥ÑÏ¢åÍ∞Ä ÏóÜÎäî ÏÉÅÌÉú**Î°ú Í∞ÑÏ£ºÎêòÍ≥†, Îî∞ÎùºÏÑú ÏÉàÎ°úÏö¥ Í≥ÑÏ¢å Î≤àÌò∏Îäî 10000000Î°ú ÏÑ§Ï†ïÎê®
        // Î∞òÌôòÍ∞íÏúºÎ°ú "1000000013"ÏÑ§Ï†ïÌïú Í≤ÉÏùÄ save() Î©îÏÑúÎìúÍ∞Ä Ìò∏Ï∂úÎêú ÌõÑ Î∞òÌôòÎêòÎäî Í∞íÏùº Îøê,
        // Ï†ÄÏû•ÌïòÍ∏∞ Ï†ÑÏùò Account Í∞ùÏ≤¥ÏóêÎäî Ïó¨Ï†ÑÌûà "1000000000"Ïù¥ÎùºÎäî Í≥ÑÏ¢åÎ≤àÌò∏Í∞Ä ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏùå
    }

    @Test
    @DisplayName("Ìï¥Îãπ Ïú†Ï†Ä ÏóÜÏùå - Í≥ÑÏ¢å ÏÉùÏÑ± Ïã§Ìå®")
    void createAccount_UserNotFound () {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.empty()); // Ïú†Ï†Ä ÏóÜÏùå -> AccountException Î∞úÏÉù

        //when
        AccountException exception
                = assertThrows(AccountException.class,
                () -> accountService.createAccount(1L, 1000L));

        //then
        assertEquals(ErrorCode.USER_NOT_FOUND, exception.getErrorCode());
    }

    @Test
    @DisplayName("Í≥ÑÏ¢åÍ∞Ä 10Í∞ú - Í≥ÑÏ¢å ÏÉùÏÑ± Ïã§Ìå®")
    void createAccount_maxAccountIs10 () {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(15L)
                .name("Pobi").build();
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));
        given(accountRepository.countByAccountUser(user))
                .willReturn(10);

        //when
        AccountException exception
                = assertThrows(AccountException.class,
                () -> accountService.createAccount(1L, 1000L));

        //then
        assertEquals(ErrorCode.USER_MAX_COUNT_PER_USER_10, exception.getErrorCode());
    }

    @Test
    @DisplayName("Í≥ÑÏ¢å Ìï¥ÏßÄ")
    void deleteAccountSuccess () {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));
        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(Account.builder()
                        .accountUser(user)
                                .balance(0L)
                        .accountNumber("1000000012").build()));

        ArgumentCaptor<Account> captor = ArgumentCaptor.forClass(Account.class);

        //when
        AccountDto accountDto = accountService.deleteAccount(1L, "1234567890");

        //then
        verify(accountRepository, times(1)).save(captor.capture());
        // save()Îäî deleteAccountÏóêÏÑú accountRepository.save() Í∞Ä ÎêòÏñ¥ÏûàÏñ¥Ïïº Ïó¨Í∏∞ÏÑú ÏÇ¨Ïö©Ïù¥ Í∞ÄÎä•ÌïòÎã§
        // üìçÏù¥Ïú†Î•º ÏÉùÍ∞ÅÌï¥Î≥¥Ïûê

        assertEquals(12L, accountDto.getUserId());
        assertEquals("1000000012", captor.getValue().getAccountNumber());
        assertEquals(AccountStatus.UNREGISTERED, captor.getValue().getAccountStatus());
    }

    @Test
    @DisplayName("Ìï¥Îãπ Ïú†Ï†Ä ÏóÜÏùå - Í≥ÑÏ¢å Ìï¥ÏßÄ Ïã§Ìå®")
    void deleteAccount_UserNotFound() {
        //given
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.empty());

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> accountService.deleteAccount(1L, "1234567890"));

        //then
        assertEquals(ErrorCode.USER_NOT_FOUND, exception.getErrorCode());
    }

    @Test
    @DisplayName("Ìï¥Îãπ Í≥ÑÏ¢å ÏóÜÏùå - Í≥ÑÏ¢å Ìï¥ÏßÄ Ïã§Ìå®")
    void deleteAccount_AccountNotFound() {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(12L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.empty());

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> accountService.deleteAccount(1L, "1234567890"));

        //then
        assertEquals(ErrorCode.ACCOUNT_NOT_FOUND, exception.getErrorCode());
    }

    @Test
    @DisplayName("Í≥ÑÏ¢å ÏÜåÏú†Ï£º Îã§Î¶Ñ - Í≥ÑÏ¢å Ìï¥ÏßÄ Ïã§Ìå®")
    void deleteAccount_UserUnMatch() {
        //given
        AccountUser pobi
                = AccountUser.builder()
                .id(13L)
                .name("Pobi").build();
        AccountUser haerin
                = AccountUser.builder()
                .id(12L)
                .name("Haerin").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(pobi));

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(
                        Account.builder()
                                .accountUser(haerin)
                                .balance(0L)
                                .accountNumber("1000000012").build()));

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> accountService.deleteAccount(1L, "1234567890"));

        //then
        assertEquals(ErrorCode.USER_ACCOUNT_UN_MATCH, exception.getErrorCode());
    }

    @Test
    @DisplayName("Í≥ÑÏ¢å ÏûîÏï° Î≥¥Ïú† - Í≥ÑÏ¢å Ìï¥ÏßÄ Ïã§Ìå®")
    void deleteAccount_BalanceNotEmpty() {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(13L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(
                        Account.builder()
                                .accountUser(user)
                                .balance(100L)
                                .accountNumber("1000000012").build()));

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> accountService.deleteAccount(1L, "1234567890"));

        //then
        assertEquals(ErrorCode.BALANCE_NOT_EMPTY, exception.getErrorCode());
    }

    @Test
    @DisplayName("Ïù¥ÎØ∏ Ìï¥ÏßÄÌïú Í≥ÑÏ¢å - Í≥ÑÏ¢å Ìï¥ÏßÄ Ïã§Ìå®")
    void deleteAccount_alreadyUnregistered() {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(13L)
                .name("Pobi").build();

        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));

        given(accountRepository.findByAccountNumber(anyString()))
                .willReturn(Optional.of(
                        Account.builder()
                                .accountUser(user)
                                .balance(0L)
                                .accountStatus(AccountStatus.UNREGISTERED)
                                .accountNumber("1000000012").build()));

        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> accountService.deleteAccount(1L, "1234567890"));

        //then
        assertEquals(ErrorCode.ACCOUNT_ALREADY_UNREGISTERED, exception.getErrorCode());
    }

    @Test
    void successGetAccountsByUserId() {
        //given
        AccountUser user
                = AccountUser.builder()
                .id(13L)
                .name("Pobi").build();
        List<Account> accounts = Arrays.asList(
                Account.builder()
                        .accountUser(user)
                        .accountNumber("1111111111")
                        .balance(1000L)
                        .build(),
                Account.builder()
                        .accountUser(user)
                        .accountNumber("2222222222")
                        .balance(1000L)
                        .build(),
                Account.builder()
                        .accountUser(user)
                        .accountNumber("3333333333")
                        .balance(1000L)
                        .build()
        );


        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.of(user));
        given(accountRepository.findByAccountUser(any()))
                .willReturn(accounts);

        //when
        List<AccountDto> accountDtos = accountService.getAccountByUserId(1L);

        //then
        assertEquals(3, accountDtos.size());
        assertEquals("1111111111", accountDtos.get(0).getAccountNumber());
        assertEquals(3, accountDtos.size());
        assertEquals("2222222222", accountDtos.get(1).getAccountNumber());
        assertEquals(3, accountDtos.size());
        assertEquals("3333333333", accountDtos.get(2).getAccountNumber());

    }

    @Test
    void FailedToGetAccounts() {
        //given
        given(accountUserRepository.findById(anyLong()))
                .willReturn(Optional.empty());
        //when
        AccountException exception = assertThrows(AccountException.class,
                () -> accountService.getAccountByUserId(1L));

        //then
        assertEquals(ErrorCode.USER_NOT_FOUND, exception.getErrorCode());
    }
}
